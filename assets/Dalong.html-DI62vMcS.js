import{_ as a,c as s,d as e,o as t}from"./app-CQw64A7d.js";const i={};function p(l,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="大龙网面试准备" tabindex="-1"><a class="header-anchor" href="#大龙网面试准备"><span>大龙网面试准备</span></a></h1><h2 id="面试要求" tabindex="-1"><a class="header-anchor" href="#面试要求"><span>面试要求</span></a></h2><ul><li>WebApi</li><li>.Net Core</li><li>EF Core</li><li>MySQL/SQL Server、存储过程、SQL设计与优化</li><li>分布式</li><li>多线程</li><li>缓存</li><li>系统安全</li><li>电子商务系统设计</li></ul><h2 id="面试准备" tabindex="-1"><a class="header-anchor" href="#面试准备"><span>面试准备</span></a></h2><h3 id="asp-net-core-webapi" tabindex="-1"><a class="header-anchor" href="#asp-net-core-webapi"><span>Asp.Net Core WebAPI</span></a></h3><h4 id="asp-net-core的启动" tabindex="-1"><a class="header-anchor" href="#asp-net-core的启动"><span>Asp.Net Core的启动</span></a></h4><p>构建WebApplication Host应用承载核心；注入依赖服务；注册中间件；启动Host</p><h4 id="筛选器" tabindex="-1"><a class="header-anchor" href="#筛选器"><span>筛选器</span></a></h4><ul><li>授权筛选器</li><li>资源筛选器</li><li>操作筛选器 ActionFilter <ul><li>在操作方法之前或之后运行</li><li>可以更改传递到操作(Action)中的参数</li><li>可以更改从Action返回的结果</li></ul></li><li>终结点筛选器（新加的） <ul><li>同上</li><li>增加：可以在Action和基于路由处理程序的终结点上调用</li></ul></li><li>异常筛选器</li><li>结果筛选器</li></ul><h4 id="全局异常处理" tabindex="-1"><a class="header-anchor" href="#全局异常处理"><span>全局异常处理</span></a></h4><h5 id="异常筛选器" tabindex="-1"><a class="header-anchor" href="#异常筛选器"><span>异常筛选器</span></a></h5><p>异常筛选器拦截范围是Controller，可以将异常拦截处理后标记为异常已处理，这样不会再向上抛出到异常中间件</p><p>可以利用自定义异常，然后再通过异常筛选器捕获这个自定义异常，进行重定向到特定的展示页面</p><h5 id="异常中间件" tabindex="-1"><a class="header-anchor" href="#异常中间件"><span>异常中间件</span></a></h5><p>全局异常处理，最后的防线</p><h4 id="自定义中间件" tabindex="-1"><a class="header-anchor" href="#自定义中间件"><span>自定义中间件</span></a></h4><ul><li><code>Func&lt;RequestDelegate,RequestDelegate&gt;</code></li><li><code>Func&lt;HttpContext,RequestDelegate,Task&gt;</code></li><li><code>Func&lt;HttpContext,Func&lt;Task&gt;,Task&gt;</code></li><li>IMiddleware接口，通过IMiddleware接口定义的中间件需要IOC注入，由IOC管理生命周期</li></ul><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p>命令行 &gt; 非前缀环境变量 &gt; 用户机密 &gt; <code>appsettings.{Environment}.json</code> &gt; <code>appsettings.json</code> &gt; ASPNETCORE_前缀环境变量 &gt; DOTNET_前缀环境变量</p><p>配置文件绑定：</p><ul><li>通过<code>Bind</code></li><li>通过<code>Get&lt;T&gt;</code></li><li>通过选项接口<code>IOptions&lt;T&gt;</code>、<code>IOptionsMonitor&lt;T&gt;</code></li></ul><p>使用强类型绑定配置文件是，传递的参数都是Configuration的Section</p><h5 id="bind和get-t" tabindex="-1"><a class="header-anchor" href="#bind和get-t"><span><code>Bind</code>和<code>Get&lt;T&gt;</code></span></a></h5><p>通过Bind绑定时，需要先有一个选项类的实例</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;SectionName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>Get&lt;T&gt;</code>绑定时，会直接返回T类型的选项类实例</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;SectionName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Options<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="ioptions-t-和ioptionsmonitor-t" tabindex="-1"><a class="header-anchor" href="#ioptions-t-和ioptionsmonitor-t"><span><code>IOptions&lt;T&gt;</code>和<code>IOptionsMonitor&lt;T&gt;</code></span></a></h5><p>两者都注册为单例，可以注入到任何服务生命周期</p><p>相比<code>IOptions&lt;T&gt;</code>，<code>IOptionsMonitor&lt;T&gt;</code>支持更改通知、命名选项、可重载配置</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// 注册配置，后续可以通过选项接口获取</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Options<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;Options&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用时通过构造函数注入使用</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token function">ctor</span><span class="token punctuation">(</span><span class="token class-name">IOptions<span class="token punctuation">&lt;</span>Options<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取到强类型配置options</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h4><p><code>ILogger&lt;T&gt;</code></p><p>Providers日志提供程序</p><h5 id="日志级别" tabindex="-1"><a class="header-anchor" href="#日志级别"><span>日志级别</span></a></h5><p>Trace、Debug、Information、Warning、Error、Critical、None</p><p>使用<code>app.UseHttpLogging()</code>可以启用HTTP日志记录（会影响性能）</p><p><code>builder.Services.AddHttpLogging(options=&gt;{})</code>可以配置要记录的值</p><p>使用<code>app.UseW3CLogging()</code>可以以W3C标准的方式记录日志（会影响性能）</p><h4 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h4><p><code>app.UseRouting()</code>负责匹配路由</p><p><code>app.UseControllers()</code>负责加载匹配到路由后的委托</p><p>在UseRouting和UseControllers的中间Endpoints为null</p><h4 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h4><p><code>app.UseExceptionHandler()</code>异常处理中间件，对未经处理的异常进行捕获</p><p><code>app.UseStatusCodePages()</code>中间件可对不同的状态码返回不同的响应（应在静态文件中间件和Endpoint之间使用，在生产中几乎不用，没有意义）</p><h4 id="httpclient" tabindex="-1"><a class="header-anchor" href="#httpclient"><span>HttpClient</span></a></h4><p><code>builder.Services.AddHttpClient()</code></p><p>使用IHttpClientFactory创建HttpClient</p><h4 id="身份认证与授权" tabindex="-1"><a class="header-anchor" href="#身份认证与授权"><span>身份认证与授权</span></a></h4><p>使用<code>IAuthorizationPolicyProvider</code>接口实现自定义授权策略</p><h4 id="全球化" tabindex="-1"><a class="header-anchor" href="#全球化"><span>全球化</span></a></h4><p><code>IStringLocalizer&lt;T&gt;</code>配合Resx资源文件</p><h4 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h4><ul><li>缓存雪崩：宕机或者同时过期</li><li>缓存击穿：热点数据过期</li><li>缓存穿透：数据不在缓存也不在数据库（非法数据）导致每次都会请求数据库</li></ul><p>保持缓存一致性：先更新数据库，再删除缓存，删除缓存时引入重试机制</p><p>响应缓存<code>app.UseResponseCaching()</code>中间件，必须在Cors之前调用</p><p>对象池ObjectPool，DI中注入（Singleton）<code>ObjectPoolProvider&lt;T&gt;</code>并将其用作工厂</p><h3 id="ef-core" tabindex="-1"><a class="header-anchor" href="#ef-core"><span>EF Core</span></a></h3><h4 id="高性能" tabindex="-1"><a class="header-anchor" href="#高性能"><span>高性能</span></a></h4><ul><li>使用Select只投影需要的属性</li><li>限制大小，高效分页，避免笛卡尔爆炸</li><li>尽量不用延迟加载</li><li>使用流式处理（IEnumerable而不是ToList）</li><li>AsNoTracking()不追踪</li><li>使用原生SQL</li><li>异步</li><li>批量更新（最后调用SaveChangeAsync）</li></ul><h4 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h4><p>默认情况下SaveChange是一个事务，如果不满足需求可以使用BeginTransaction手动开启事务，最后通过Commit提交事务</p><h4 id="泛型仓储" tabindex="-1"><a class="header-anchor" href="#泛型仓储"><span>泛型仓储</span></a></h4><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">virtual</span> DbSet<span class="token operator">&lt;</span>TEntity<span class="token operator">&gt;</span> Table</span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token function">ctor</span><span class="token punctuation">(</span><span class="token class-name">DbContext</span> context<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Table <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TEntity<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="entity状态" tabindex="-1"><a class="header-anchor" href="#entity状态"><span>Entity状态</span></a></h4><table><thead><tr><th>EntityState</th><th>是否跟踪</th><th>SaveChange操作</th></tr></thead><tbody><tr><td>Detached</td><td>未跟踪</td><td></td></tr><tr><td>Added</td><td>跟踪</td><td>插入</td></tr><tr><td>Unchanged</td><td>跟踪</td><td>无</td></tr><tr><td>Modified</td><td>跟踪</td><td>更新</td></tr><tr><td>Deleted</td><td>跟踪</td><td>删除</td></tr></tbody></table><p>Attach实体将设为Unchanged状态</p><p>Update实体将设为Modified状态</p><p>可以手动更改实体的状态</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// 手动将状态变更为已修改</span></span>
<span class="line">context<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Modified</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h3><h4 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程"><span>执行流程</span></a></h4><ul><li>连接器</li><li>查询缓存</li><li>解析SQL <ul><li>解析器</li></ul></li><li>执行SQL <ul><li>预处理器</li><li>优化器</li><li>执行器</li></ul></li></ul><h4 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h4><h5 id="索引失效" tabindex="-1"><a class="header-anchor" href="#索引失效"><span>索引失效</span></a></h5><ul><li>使用左或者左右模糊匹配时索引会失效</li><li>查询条件中对索引列做了计算、函数、类型转换操作，会导致索引失效</li><li>联合索引要能正确遵循最左匹配原则，也就是按照最左优先的方式进行索引匹配，否则会导致索引失效</li><li>在WHERE子句中，如果在OR前的条件列是索引列，而在OR后的条件列不是索引列，那么索引会失效</li><li>为了更好的利用索引，索引列要设置为NOT NULL约束</li></ul><h4 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h4><p>死锁的四个必要条件：互斥、占有且等待、不可强占用、循环等待</p><p>死锁的避免办法：设置事务等待锁的超时时间、开启主动死锁检测</p><h4 id="并发事务问题" tabindex="-1"><a class="header-anchor" href="#并发事务问题"><span>并发事务问题</span></a></h4><ul><li>脏读：一个事务读到了另一个事务还没有提交的数据</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了“幻影”。</li></ul><h4 id="事务隔离级别及会出现的问题" tabindex="-1"><a class="header-anchor" href="#事务隔离级别及会出现的问题"><span>事务隔离级别及会出现的问题</span></a></h4><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>读已提交</td><td>✕</td><td>✓</td><td>✓</td></tr><tr><td>可重复读（默认）</td><td>✕</td><td>✕</td><td>✓</td></tr><tr><td>序列换</td><td>✕</td><td>✕</td><td>✕</td></tr></tbody></table><p>查看事务隔离级别</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>设置事务隔离级别</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SET</span> { <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> } <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> {<span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>事务隔离级别越高，数据越安全，但是性能越低</p><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h3><h4 id="redis的基础键值对数据类型" tabindex="-1"><a class="header-anchor" href="#redis的基础键值对数据类型"><span>Redis的基础键值对数据类型</span></a></h4><p>String（字符串）、List（列表）、Hash（哈希表）、Set（集合）、Zset（有序集合）</p>`,94)]))}const c=a(i,[["render",p],["__file","Dalong.html.vue"]]),d=JSON.parse('{"path":"/Interview/Dalong.html","title":"大龙网面试准备","lang":"zh-CN","frontmatter":{"title":"大龙网面试准备","sidebarDepth":4},"headers":[{"level":2,"title":"面试要求","slug":"面试要求","link":"#面试要求","children":[]},{"level":2,"title":"面试准备","slug":"面试准备","link":"#面试准备","children":[{"level":3,"title":"Asp.Net Core WebAPI","slug":"asp-net-core-webapi","link":"#asp-net-core-webapi","children":[]},{"level":3,"title":"EF Core","slug":"ef-core","link":"#ef-core","children":[]},{"level":3,"title":"数据库","slug":"数据库","link":"#数据库","children":[]},{"level":3,"title":"Redis","slug":"redis","link":"#redis","children":[]}]}],"git":{"updatedTime":1696577922000,"contributors":[{"name":"吴俊城","email":"wujunchengman@163.com","commits":1}]},"filePathRelative":"Interview/Dalong.md"}');export{c as comp,d as data};
